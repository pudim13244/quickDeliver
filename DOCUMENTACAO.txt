=================================================================================
                            QUICKDELIVER - DOCUMENTA√á√ÉO
=================================================================================

SOBRE O PROJETO
===============
QuickDeliver √© um aplicativo de delivery de comida desenvolvido em React com TypeScript.
O app permite aos usu√°rios navegar por restaurantes, adicionar itens ao carrinho,
fazer pedidos e acompanhar o status da entrega em tempo real.

TECNOLOGIAS UTILIZADAS
======================
- React 18.3.1
- TypeScript
- Vite (bundler)
- React Router DOM 6.26.2 (roteamento)
- Tailwind CSS (estiliza√ß√£o)
- Shadcn/UI (componentes UI)
- Lucide React (√≠cones)
- TanStack React Query 5.56.2 (gerenciamento de estado)
- Context API (gerenciamento de estado global)

ESTRUTURA DO PROJETO
====================

src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                    # Componentes UI base (shadcn/ui)
‚îÇ   ‚îî‚îÄ‚îÄ Header.tsx             # Cabe√ßalho da aplica√ß√£o
‚îú‚îÄ‚îÄ contexts/
‚îÇ   ‚îú‚îÄ‚îÄ CartContext.tsx        # Contexto do carrinho de compras
‚îÇ   ‚îî‚îÄ‚îÄ OrderContext.tsx       # Contexto de pedidos
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ Index.tsx              # P√°gina inicial
‚îÇ   ‚îú‚îÄ‚îÄ Search.tsx             # P√°gina de busca e filtros
‚îÇ   ‚îú‚îÄ‚îÄ Restaurant.tsx         # P√°gina do restaurante
‚îÇ   ‚îú‚îÄ‚îÄ Cart.tsx               # P√°gina do carrinho
‚îÇ   ‚îú‚îÄ‚îÄ Address.tsx            # P√°gina de endere√ßo
‚îÇ   ‚îú‚îÄ‚îÄ Payment.tsx            # P√°gina de pagamento
‚îÇ   ‚îú‚îÄ‚îÄ OrderTracking.tsx      # P√°gina de acompanhamento do pedido
‚îÇ   ‚îî‚îÄ‚îÄ NotFound.tsx           # P√°gina 404
‚îî‚îÄ‚îÄ App.tsx                    # Componente principal com roteamento

FUNCIONALIDADES PRINCIPAIS
==========================

1. P√ÅGINA INICIAL (/)
   - Exibi√ß√£o de localiza√ß√£o do usu√°rio
   - Barra de busca
   - Banners promocionais
   - Grid de categorias de comida
   - Lista de restaurantes pr√≥ximos com:
     * Avalia√ß√£o
     * Tempo de entrega
     * Taxa de entrega
     * Dist√¢ncia
     * Promo√ß√µes

2. P√ÅGINA DE BUSCA (/search)
   - Busca por nome do restaurante ou tipo de comida
   - Filtros por categoria
   - Lista de resultados filtrados
   - Informa√ß√µes detalhadas dos restaurantes

3. P√ÅGINA DO RESTAURANTE (/restaurant/:id)
   - Informa√ß√µes do restaurante
   - Menu de produtos
   - Adicionar itens ao carrinho
   - Customiza√ß√µes de produtos

4. CARRINHO (/cart)
   - Lista de itens adicionados
   - Controle de quantidade
   - C√°lculo de subtotal
   - Taxa de entrega
   - Total final
   - Bot√£o para finalizar pedido

5. ENDERE√áO (/address)
   - Formul√°rio de endere√ßo de entrega
   - Valida√ß√£o de campos obrigat√≥rios

6. PAGAMENTO (/payment)
   - Sele√ß√£o de m√©todo de pagamento
   - Confirma√ß√£o do pedido
   - Gera√ß√£o do ID do pedido

7. ACOMPANHAMENTO (/order-tracking/:orderId)
   - Status do pedido em tempo real
   - Informa√ß√µes do entregador
   - Tempo estimado de entrega
   - Mapa de localiza√ß√£o (simulado)

CONTEXTOS E GERENCIAMENTO DE ESTADO
====================================

CART CONTEXT (CartContext.tsx)
- Gerencia o estado do carrinho de compras
- Fun√ß√µes dispon√≠veis:
  * addItem(): Adiciona item ao carrinho
  * removeItem(): Remove item do carrinho
  * updateQuantity(): Atualiza quantidade
  * clearCart(): Limpa o carrinho
  * totalItems: Total de itens
  * totalPrice: Pre√ßo total
  * deliveryFee: Taxa de entrega
  * finalTotal: Total final

ORDER CONTEXT (OrderContext.tsx)
- Gerencia o estado dos pedidos
- Fun√ß√µes dispon√≠veis:
  * createOrder(): Cria um novo pedido
  * updateOrderStatus(): Atualiza status do pedido
  * getOrder(): Busca pedido por ID
- Status de pedido: confirmed, preparing, on_way, delivered

COMPONENTES REUTILIZ√ÅVEIS
=========================

HEADER (Header.tsx)
- Cabe√ßalho flex√≠vel usado em todas as p√°ginas
- Props:
  * title?: string - T√≠tulo personalizado
  * showBack?: boolean - Exibir bot√£o voltar
  * showCart?: boolean - Exibir √≠cone do carrinho
- Exibe contador de itens no carrinho

ROTEAMENTO
==========
- "/" - P√°gina inicial
- "/search" - Busca e filtros
- "/restaurant/:id" - P√°gina do restaurante
- "/cart" - Carrinho de compras
- "/address" - Endere√ßo de entrega
- "/payment" - Pagamento
- "/order-tracking/:orderId" - Acompanhamento do pedido
- "*" - P√°gina 404 (NotFound)

RESPONSIVIDADE
==============
- Design mobile-first
- Layout otimizado para dispositivos m√≥veis
- M√°ximo de 448px de largura (max-w-md)
- Interface touch-friendly

DADOS MOCKADOS
==============
O aplicativo utiliza dados est√°ticos para demonstra√ß√£o:

CATEGORIAS:
- Pizza üçï
- Hamb√∫rguer üçî
- Japonesa üç£
- Brasileira üçñ
- Italiana üçù
- Doces üç∞

RESTAURANTES EXEMPLO:
1. Pizzaria Bella Napoli
   - Categoria: Pizza
   - Avalia√ß√£o: 4.8
   - Tempo: 25-35 min
   - Taxa: R$ 4,99

2. Burger House
   - Categoria: Hamb√∫rguer
   - Avalia√ß√£o: 4.6
   - Tempo: 30-40 min
   - Taxa: R$ 3,99

3. Sushi Zen
   - Categoria: Japonesa
   - Avalia√ß√£o: 4.9
   - Tempo: 40-50 min
   - Taxa: R$ 5,99

SIMULA√á√ïES
==========
- Mudan√ßa autom√°tica de status do pedido
- Entregador fict√≠cio: Jo√£o Silva (4.8 estrelas)
- Localiza√ß√£o fixa: R. das Flores, 123 - Centro
- Taxa de entrega padr√£o: R$ 4,99

COMO EXECUTAR O PROJETO
=======================
1. Clone o reposit√≥rio
2. Instale as depend√™ncias: npm install
3. Execute o projeto: npm run dev
4. Acesse: http://localhost:5173

COMO EXPANDIR O PROJETO
=======================
Para tornar o app funcional em produ√ß√£o:

1. INTEGRA√á√ÉO COM BACKEND:
   - Conectar com API real de restaurantes
   - Implementar autentica√ß√£o de usu√°rios
   - Sistema de pagamento real
   - Tracking GPS real

2. BANCO DE DADOS:
   - Usar Supabase ou outro banco
   - Tabelas: users, restaurants, products, orders, etc.

3. FUNCIONALIDADES ADICIONAIS:
   - Sistema de avalia√ß√µes
   - Hist√≥rico de pedidos
   - Notifica√ß√µes push
   - Chat com entregador
   - Cupons de desconto

4. OTIMIZA√á√ïES:
   - Cache de dados
   - Lazy loading de imagens
   - Service Worker para offline
   - Testes automatizados

DEPLOY
======
O projeto pode ser deployado usando:
- Vercel
- Netlify
- GitHub Pages

Para deploy personalizado:
1. Build: npm run build
2. Upload da pasta dist/ para servidor

CONTATO E SUPORTE
=================
Para d√∫vidas ou sugest√µes, entre em contato com o desenvolvedor respons√°vel pelo projeto.

=================================================================================
                            FIM DA DOCUMENTA√á√ÉO
=================================================================================
